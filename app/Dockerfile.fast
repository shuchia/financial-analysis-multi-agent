# Ultra-fast Dockerfile using exact package versions from successful build
# Use AWS Public ECR instead of Docker Hub to avoid rate limits

# Stage 1: Build dependencies (cached layer)
FROM public.ecr.aws/docker/library/python:3.11-slim as builder

# Install system dependencies needed for building Python packages
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set up pip for faster installs
RUN pip install --upgrade pip && \
    pip install --no-cache-dir wheel

# Create virtual environment for dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy locked requirements for exact versions (no dependency resolution needed)
COPY requirements-locked.txt /tmp/requirements-locked.txt

# Install Python dependencies in virtual environment using exact versions
# This should be MUCH faster since no dependency resolution is needed
RUN pip install --no-cache-dir -r /tmp/requirements-locked.txt

# Stage 2: Runtime (smaller final image)
FROM public.ecr.aws/docker/library/python:3.11-slim as runtime

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Set up environment
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONPATH="/app"
ENV PYTHONUNBUFFERED=1

# Set working directory
WORKDIR /app

# Create non-root user
RUN adduser --disabled-password --gecos '' streamlit-user

# Copy application code
COPY --chown=streamlit-user:streamlit-user . .

# Switch to non-root user
USER streamlit-user

# Expose port 8080 for ALB
EXPOSE 8080

# Health check for ALB
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/app/_stcore/health || exit 1

# Run Streamlit with optimized configuration
CMD ["streamlit", "run", "app.py", \
     "--server.port=8080", \
     "--server.address=0.0.0.0", \
     "--server.baseUrlPath=/app", \
     "--server.enableCORS=false", \
     "--server.enableXsrfProtection=false", \
     "--server.enableWebsocketCompression=false"]